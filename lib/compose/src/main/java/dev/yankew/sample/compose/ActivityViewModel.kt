/*
 * Copyright 2022 WANG Yanke
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.yankew.sample.compose

import android.app.Activity
import android.content.ContextWrapper
import androidx.activity.ComponentActivity
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelStoreOwner
import androidx.lifecycle.viewmodel.compose.viewModel

/**
 * Get or create a Activity scope ViewModel instance.
 *
 * This function is usually used with Hilt because the Activity generated by Hilt implements
 * HasDefaultViewModelProviderFactory and the viewModel method can use that factory to create
 * the ViewModel.
 */
@Composable
inline fun <reified VM : ViewModel> activityViewModel(): VM = viewModel(
    getActivityViewModelStoreOwner()
)

@Composable
fun getActivityViewModelStoreOwner(): ViewModelStoreOwner {
    return LocalContext.current.let {
        var ctx = it
        while (ctx is ContextWrapper) {
            if (ctx is Activity) {
                if (ctx is ComponentActivity) {
                    return@let ctx
                } else {
                    break
                }
            }
            ctx = ctx.baseContext
        }
        throw IllegalStateException(
            "Expected a ComponentActivity context as a ViewModelStoreOwner but instead found: $ctx"
        )
    }
}
